typedef long DomainId_t;

typedef long InstanceHandle_t;

struct BuiltinTopicKey_t {
   long value[3];
};

typedef sequence<InstanceHandle_t> InstanceHandleSeq;

typedef long ReturnCode_t;

typedef long QosPolicyId_t;

typedef sequence<string> StringSeq;

struct Duration_t {
   long sec;
   unsigned long nanosec;
};

struct Time_t {
   long sec;
   unsigned long nanosec;
};

const InstanceHandle_t HANDLE_NIL = 0;
const long LENGTH_UNLIMITED = -1;
const long DURATION_INFINITE_SEC = 0x7fffffff;
const unsigned long DURATION_INFINITE_NSEC = 0x7fffffff;
const long DURATION_ZERO_SEC = 0;
const unsigned long DURATION_ZERO_NSEC = 0;
const long TIME_INVALID_SEC = -1;
const unsigned long TIME_INVALID_NSEC = 0xffffffff;
const ReturnCode_t RETCODE_OK = 0;
const ReturnCode_t RETCODE_ERROR = 1;
const ReturnCode_t RETCODE_UNSUPPORTED = 2;
const ReturnCode_t RETCODE_BAD_PARAMETER = 3;
const ReturnCode_t RETCODE_PRECONDITION_NOT_MET = 4;
const ReturnCode_t RETCODE_OUT_OF_RESOURCES = 5;
const ReturnCode_t RETCODE_NOT_ENABLED = 6;
const ReturnCode_t RETCODE_IMMUTABLE_POLICY = 7;
const ReturnCode_t RETCODE_INCONSISTENT_POLICY = 8;
const ReturnCode_t RETCODE_ALREADY_DELETED = 9;
const ReturnCode_t RETCODE_TIMEOUT = 10;
const ReturnCode_t RETCODE_NO_DATA = 11;
const ReturnCode_t RETCODE_ILLEGAL_OPERATION = 12;

typedef unsigned long StatusKind;

typedef unsigned long StatusMask;

const StatusKind INCONSISTENT_TOPIC_STATUS = 0x0001 << 0;
const StatusKind OFFERED_DEADLINE_MISSED_STATUS = 0x0001 << 1;
const StatusKind REQUESTED_DEADLINE_MISSED_STATUS = 0x0001 << 2;
const StatusKind OFFERED_INCOMPATIBLE_QOS_STATUS = 0x0001 << 5;
const StatusKind REQUESTED_INCOMPATIBLE_QOS_STATUS = 0x0001 << 6;
const StatusKind SAMPLE_LOST_STATUS = 0x0001 << 7;
const StatusKind SAMPLE_REJECTED_STATUS = 0x0001 << 8;
const StatusKind DATA_ON_READERS_STATUS = 0x0001 << 9;
const StatusKind DATA_AVAILABLE_STATUS = 0x0001 << 10;
const StatusKind LIVELINESS_LOST_STATUS = 0x0001 << 11;
const StatusKind LIVELINESS_CHANGED_STATUS = 0x0001 << 12;
const StatusKind PUBLICATION_MATCHED_STATUS = 0x0001 << 13;
const StatusKind SUBSCRIPTION_MATCHED_STATUS = 0x0001 << 14;

struct InconsistentTopicStatus {
   long total_count;
   long total_count_change;
};

struct SampleLostStatus {
   long total_count;
   long total_count_change;
};

enum SampleRejectedStatusKind {
   NOT_REJECTED,
   REJECTED_BY_INSTANCES_LIMIT,
   REJECTED_BY_SAMPLES_LIMIT,
   REJECTED_BY_SAMPLES_PER_INSTANCE_LIMIT
};

struct SampleRejectedStatus {
   long total_count;
   long total_count_change;
   SampleRejectedStatusKind last_reason;
   InstanceHandle_t last_instance_handle;
};

struct LivelinessLostStatus {
   long total_count;
   long total_count_change;
};

struct LivelinessChangedStatus {
   long alive_count;
   long not_alive_count;
   long alive_count_change;
   long not_alive_count_change;
   InstanceHandle_t last_publication_handle;
};

struct OfferedDeadlineMissedStatus {
   long total_count;
   long total_count_change;
   InstanceHandle_t last_instance_handle;
};

struct RequestedDeadlineMissedStatus {
   long total_count;
   long total_count_change;
   InstanceHandle_t last_instance_handle;
};

struct QosPolicyCount {
   QosPolicyId_t policy_id;
   long count;
};

typedef sequence<QosPolicyCount> QosPolicyCountSeq;

struct OfferedIncompatibleQosStatus {
   long total_count;
   long total_count_change;
   QosPolicyId_t last_policy_id;
   QosPolicyCountSeq policies;
};

struct RequestedIncompatibleQosStatus {
   long total_count;
   long total_count_change;
   QosPolicyId_t last_policy_id;
   QosPolicyCountSeq policies;
};

struct PublicationMatchedStatus {
   long total_count;
   long total_count_change;
   long current_count;
   long current_count_change;
   InstanceHandle_t last_subscription_handle;
};

struct SubscriptionMatchedStatus {
   long total_count;
   long total_count_change;
   long current_count;
   long current_count_change;
   InstanceHandle_t last_publication_handle;
};

typedef unsigned long SampleStateKind;

const SampleStateKind READ_SAMPLE_STATE = 0x0001 << 0;
const SampleStateKind NOT_READ_SAMPLE_STATE = 0x0001 << 1;

typedef unsigned long SampleStateMask;

const SampleStateMask ANY_SAMPLE_STATE = 0xffff;

typedef unsigned long ViewStateKind;

const ViewStateKind NEW_VIEW_STATE = 0x0001 << 0;
const ViewStateKind NOT_NEW_VIEW_STATE = 0x0001 << 1;

typedef unsigned long ViewStateMask;

const ViewStateMask ANY_VIEW_STATE = 0xffff;

typedef unsigned long InstanceStateKind;

const InstanceStateKind ALIVE_INSTANCE_STATE = 0x0001 << 0;
const InstanceStateKind NOT_ALIVE_DISPOSED_INSTANCE_STATE = 0x0001 << 1;
const InstanceStateKind NOT_ALIVE_NO_WRITERS_INSTANCE_STATE = 0x0001 << 2;

typedef unsigned long InstanceStateMask;

const InstanceStateMask ANY_INSTANCE_STATE = 0xffff;
const InstanceStateMask NOT_ALIVE_INSTANCE_STATE = 0x006;
const string USERDATA_QOS_POLICY_NAME = "UserData";
const string DURABILITY_QOS_POLICY_NAME = "Durability";
const string PRESENTATION_QOS_POLICY_NAME = "Presentation";
const string DEADLINE_QOS_POLICY_NAME = "Deadline";
const string LATENCYBUDGET_QOS_POLICY_NAME = "LatencyBudget";
const string OWNERSHIP_QOS_POLICY_NAME = "Ownership";
const string OWNERSHIPSTRENGTH_QOS_POLICY_NAME = "OwnershipStrength";
const string LIVELINESS_QOS_POLICY_NAME = "Liveliness";
const string TIMEBASEDFILTER_QOS_POLICY_NAME = "TimeBasedFilter";
const string PARTITION_QOS_POLICY_NAME = "Partition";
const string RELIABILITY_QOS_POLICY_NAME = "Reliability";
const string DESTINATIONORDER_QOS_POLICY_NAME = "DestinationOrder";
const string HISTORY_QOS_POLICY_NAME = "History";
const string RESOURCELIMITS_QOS_POLICY_NAME = "ResourceLimits";
const string ENTITYFACTORY_QOS_POLICY_NAME = "EntityFactory";
const string WRITERDATALIFECYCLE_QOS_POLICY_NAME = "WriterDataLifecycle";
const string READERDATALIFECYCLE_QOS_POLICY_NAME = "ReaderDataLifecycle";
const string TOPICDATA_QOS_POLICY_NAME = "TopicData";
const string GROUPDATA_QOS_POLICY_NAME = "TransportPriority";
const string LIFESPAN_QOS_POLICY_NAME = "Lifespan";
const string DURABILITYSERVICE_POLICY_NAME = "DurabilityService";
const QosPolicyId_t INVALID_QOS_POLICY_ID = 0;
const QosPolicyId_t USERDATA_QOS_POLICY_ID = 1;
const QosPolicyId_t DURABILITY_QOS_POLICY_ID = 2;
const QosPolicyId_t PRESENTATION_QOS_POLICY_ID = 3;
const QosPolicyId_t DEADLINE_QOS_POLICY_ID = 4;
const QosPolicyId_t LATENCYBUDGET_QOS_POLICY_ID = 5;
const QosPolicyId_t OWNERSHIP_QOS_POLICY_ID = 6;
const QosPolicyId_t OWNERSHIPSTRENGTH_QOS_POLICY_ID = 7;
const QosPolicyId_t LIVELINESS_QOS_POLICY_ID = 8;
const QosPolicyId_t TIMEBASEDFILTER_QOS_POLICY_ID = 9;
const QosPolicyId_t PARTITION_QOS_POLICY_ID = 10;
const QosPolicyId_t RELIABILITY_QOS_POLICY_ID = 11;
const QosPolicyId_t DESTINATIONORDER_QOS_POLICY_ID = 12;
const QosPolicyId_t HISTORY_QOS_POLICY_ID = 13;
const QosPolicyId_t RESOURCELIMITS_QOS_POLICY_ID = 14;
const QosPolicyId_t ENTITYFACTORY_QOS_POLICY_ID = 15;
const QosPolicyId_t WRITERDATALIFECYCLE_QOS_POLICY_ID = 16;
const QosPolicyId_t READERDATALIFECYCLE_QOS_POLICY_ID = 17;
const QosPolicyId_t TOPICDATA_QOS_POLICY_ID = 18;
const QosPolicyId_t GROUPDATA_QOS_POLICY_ID = 19;
const QosPolicyId_t TRANSPORTPRIORITY_QOS_POLICY_ID = 20;
const QosPolicyId_t LIFESPAN_QOS_POLICY_ID = 21;
const QosPolicyId_t DURABILITYSERVICE_QOS_POLICY_ID = 22;

struct UserDataQosPolicy {
   sequence<octet> value;
};

struct TopicDataQosPolicy {
   sequence<octet> value;
};

struct GroupDataQosPolicy {
   sequence<octet> value;
};

struct TransportPriorityQosPolicy {
   long value;
};

struct LifespanQosPolicy {
   Duration_t duration;
};

enum DurabilityQosPolicyKind {
   VOLATILE_DURABILITY_QOS,
   TRANSIENT_LOCAL_DURABILITY_QOS,
   TRANSIENT_DURABILITY_QOS,
   PERSISTENT_DURABILITY_QOS
};

struct DurabilityQosPolicy {
   DurabilityQosPolicyKind kind;
};

enum PresentationQosPolicyAccessScopeKind {
   INSTANCE_PRESENTATION_QOS,
   TOPIC_PRESENTATION_QOS,
   GROUP_PRESENTATION_QOS
};

struct PresentationQosPolicy {
   PresentationQosPolicyAccessScopeKind access_scope;
   boolean coherent_access;
   boolean ordered_access;
};

struct DeadlineQosPolicy {
   Duration_t period;
};

struct LatencyBudgetQosPolicy {
   Duration_t duration;
};

enum OwnershipQosPolicyKind {
   SHARED_OWNERSHIP_QOS,
   EXCLUSIVE_OWNERSHIP_QOS
};

struct OwnershipQosPolicy {
   OwnershipQosPolicyKind kind;
};

struct OwnershipStrengthQosPolicy {
   long value;
};

enum LivelinessQosPolicyKind {
   AUTOMATIC_LIVELINESS_QOS,
   MANUAL_BY_PARTICIPANT_LIVELINESS_QOS,
   MANUAL_BY_TOPIC_LIVELINESS_QOS
};

struct LivelinessQosPolicy {
   LivelinessQosPolicyKind kind;
   Duration_t lease_duration;
};

struct TimeBasedFilterQosPolicy {
   Duration_t minimum_separation;
};

struct PartitionQosPolicy {
   StringSeq name;
};

enum ReliabilityQosPolicyKind {
   BEST_EFFORT_RELIABILITY_QOS,
   RELIABLE_RELIABILITY_QOS
};

struct ReliabilityQosPolicy {
   ReliabilityQosPolicyKind kind;
   Duration_t max_blocking_time;
};

enum DestinationOrderQosPolicyKind {
   BY_RECEPTION_TIMESTAMP_DESTINATIONORDER_QOS,
   BY_SOURCE_TIMESTAMP_DESTINATIONORDER_QOS
};

struct DestinationOrderQosPolicy {
   DestinationOrderQosPolicyKind kind;
};

enum HistoryQosPolicyKind {
   KEEP_LAST_HISTORY_QOS,
   KEEP_ALL_HISTORY_QOS
};

struct HistoryQosPolicy {
   HistoryQosPolicyKind kind;
   long depth;
};

struct ResourceLimitsQosPolicy {
   long max_samples;
   long max_instances;
   long max_samples_per_instance;
};

struct EntityFactoryQosPolicy {
   boolean autoenable_created_entities;
};

struct WriterDataLifecycleQosPolicy {
   boolean autodispose_unregistered_instances;
};

struct ReaderDataLifecycleQosPolicy {
   Duration_t autopurge_nowriter_samples_delay;
   Duration_t autopurge_disposed_samples_delay;
};

struct DurabilityServiceQosPolicy {
   Duration_t service_cleanup_delay;
   HistoryQosPolicyKind history_kind;
   long history_depth;
   long max_samples;
   long max_instances;
   long max_samples_per_instance;
};

struct DomainParticipantFactoryQos {
   EntityFactoryQosPolicy entity_factory;
};

struct DomainParticipantQos {
   UserDataQosPolicy user_data;
   EntityFactoryQosPolicy entity_factory;
};

struct TopicQos {
   TopicDataQosPolicy topic_data;
   DurabilityQosPolicy durability;
   DurabilityServiceQosPolicy durability_service;
   DeadlineQosPolicy deadline;
   LatencyBudgetQosPolicy latency_budget;
   LivelinessQosPolicy liveliness;
   ReliabilityQosPolicy reliability;
   DestinationOrderQosPolicy destination_order;
   HistoryQosPolicy history;
   ResourceLimitsQosPolicy resource_limits;
   TransportPriorityQosPolicy transport_priority;
   LifespanQosPolicy lifespan;
   OwnershipQosPolicy ownership;
};

struct DataWriterQos {
   DurabilityQosPolicy durability;
   DurabilityServiceQosPolicy durability_service;
   DeadlineQosPolicy deadline;
   LatencyBudgetQosPolicy latency_budget;
   LivelinessQosPolicy liveliness;
   ReliabilityQosPolicy reliability;
   DestinationOrderQosPolicy destination_order;
   HistoryQosPolicy history;
   ResourceLimitsQosPolicy resource_limits;
   TransportPriorityQosPolicy transport_priority;
   LifespanQosPolicy lifespan;
   UserDataQosPolicy user_data;
   OwnershipQosPolicy ownership;
   OwnershipStrengthQosPolicy ownership_strength;
   WriterDataLifecycleQosPolicy writer_data_lifecycle;
};

struct PublisherQos {
   PresentationQosPolicy presentation;
   PartitionQosPolicy partition;
   GroupDataQosPolicy group_data;
   EntityFactoryQosPolicy entity_factory;
};

struct DataReaderQos {
   DurabilityQosPolicy durability;
   DeadlineQosPolicy deadline;
   LatencyBudgetQosPolicy latency_budget;
   LivelinessQosPolicy liveliness;
   ReliabilityQosPolicy reliability;
   DestinationOrderQosPolicy destination_order;
   HistoryQosPolicy history;
   ResourceLimitsQosPolicy resource_limits;
   UserDataQosPolicy user_data;
   OwnershipQosPolicy ownership;
   TimeBasedFilterQosPolicy time_based_filter;
   ReaderDataLifecycleQosPolicy reader_data_lifecycle;
};

struct SubscriberQos {
   PresentationQosPolicy presentation;
   PartitionQosPolicy partition;
   GroupDataQosPolicy group_data;
   EntityFactoryQosPolicy entity_factory;
};

struct ParticipantBuiltinTopicData {
   BuiltinTopicKey_t key;
   UserDataQosPolicy user_data;
};

struct TopicBuiltinTopicData {
   BuiltinTopicKey_t key;
   string name;
   string type_name;
   DurabilityQosPolicy durability;
   DurabilityServiceQosPolicy durability_service;
   DeadlineQosPolicy deadline;
   LatencyBudgetQosPolicy latency_budget;
   LivelinessQosPolicy liveliness;
   ReliabilityQosPolicy reliability;
   TransportPriorityQosPolicy transport_priority;
   LifespanQosPolicy lifespan;
   DestinationOrderQosPolicy destination_order;
   HistoryQosPolicy history;
   ResourceLimitsQosPolicy resource_limits;
   OwnershipQosPolicy ownership;
   TopicDataQosPolicy topic_data;
};

struct PublicationBuiltinTopicData {
   BuiltinTopicKey_t key;
   BuiltinTopicKey_t participant_key;
   string topic_name;
   string type_name;
   DurabilityQosPolicy durability;
   DurabilityServiceQosPolicy durability_service;
   DeadlineQosPolicy deadline;
   LatencyBudgetQosPolicy latency_budget;
   LivelinessQosPolicy liveliness;
   ReliabilityQosPolicy reliability;
   LifespanQosPolicy lifespan;
   UserDataQosPolicy user_data;
   OwnershipQosPolicy ownership;
   OwnershipStrengthQosPolicy ownership_strength;
   DestinationOrderQosPolicy destination_order;
   PresentationQosPolicy presentation;
   PartitionQosPolicy partition;
   TopicDataQosPolicy topic_data;
   GroupDataQosPolicy group_data;
};

struct SubscriptionBuiltinTopicData {
   BuiltinTopicKey_t key;
   BuiltinTopicKey_t participant_key;
   string topic_name;
   string type_name;
   DurabilityQosPolicy durability;
   DeadlineQosPolicy deadline;
   LatencyBudgetQosPolicy latency_budget;
   LivelinessQosPolicy liveliness;
   ReliabilityQosPolicy reliability;
   OwnershipQosPolicy ownership;
   DestinationOrderQosPolicy destination_order;
   UserDataQosPolicy user_data;
   TimeBasedFilterQosPolicy time_based_filter;
   PresentationQosPolicy presentation;
   PartitionQosPolicy partition;
   TopicDataQosPolicy topic_data;
   GroupDataQosPolicy group_data;
};

struct SampleInfo {
   SampleStateKind sample_state;
   ViewStateKind view_state;
   InstanceStateKind instance_state;
   Time_t source_timestamp;
   InstanceHandle_t instance_handle;
   InstanceHandle_t publication_handle;
   long disposed_generation_count;
   long no_writers_generation_count;
   long sample_rank;
   long generation_rank;
   long absolute_generation_rank;
   boolean valid_data;
};

typedef sequence<SampleInfo> SampleInfoSeq;

struct Foo {
   long dummy;
};

typedef sequence<Foo> FooSeq;

